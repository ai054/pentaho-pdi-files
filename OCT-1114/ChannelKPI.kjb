<?xml version="1.0" encoding="UTF-8"?>
<job>
  <name>ChannelKPI</name>
  <description/>
  <extended_description/>
  <job_version/>
  <job_status>0</job_status>
  <directory>/</directory>
  <created_user>-</created_user>
  <created_date>2018/02/01 10:20:28.216</created_date>
  <modified_user>-</modified_user>
  <modified_date>2018/02/01 10:20:28.216</modified_date>
  <parameters>
    <parameter>
      <name>HOST</name>
      <default_value/>
      <description/>
    </parameter>
    <parameter>
      <name>account</name>
      <default_value/>
      <description/>
    </parameter>
  </parameters>
  <connection>
    <name>hadoop</name>
    <server>${HOST}</server>
    <type>HIVE2</type>
    <access>Native</access>
    <database>feeds</database>
    <port>10000</port>
    <username>hive</username>
    <password>Encrypted 2be98afc86aa7f2e4cb79ce10d69bb9df</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>10000</attribute>
      </attribute>
      <attribute>
        <code>PRESERVE_RESERVED_WORD_CASE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_TIMESTAMP_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    </slaveservers>
  <job-log-table>
    <connection/>
    <schema/>
    <table/>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>START</name>
      <description/>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>112</xloc>
      <yloc>96</yloc>
    </entry>
    <entry>
      <name>BaseTable</name>
      <description/>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}/CreateBaseTable_Acq.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration>Pentaho local</run_configuration>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
        <parameter>
          <name>account</name>
          <stream_name/>
          <value>${account}</value>
        </parameter>
        <parameter>
          <name>HOST</name>
          <stream_name/>
          <value>${HOST}</value>
        </parameter>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>288</xloc>
      <yloc>96</yloc>
    </entry>
    <entry>
      <name>channelKPI</name>
      <description/>
      <type>SQL</type>
      <sql>create table channelKPI3 as
SELECT account_id, channel,calendar_date,
sum(kw_imps) as num_imps, 
sum(kw_clicks) AS num_clicks, 
round(sum(kw_clicks)/sum(kw_imps),2)*100 as ctr, 
round(sum(kw_conv)/sum(kw_clicks),2)*100 as conv_rate, 
sum(kw_conv) AS conv,
--sum(convratemanyperclick) AS manyConv,
sum(kw_clicks*(kw_cpc/1000000))/sum(kw_clicks) as avg_cpc, 
--sum(kw_clicks*(kw_cpc/1000000)) as totalCost,
sum(totalconvvalue) as totalRevenue,
avg(avg_position) as position,
avg(quality_score) as avg_quality_score
FROM feeds.acquisition_base a
where  kw_imps > 0
group by account_id,channel,a.calendar_date;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>hadoop</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>384</xloc>
      <yloc>96</yloc>
    </entry>
    <entry>
      <name>Drop</name>
      <description/>
      <type>SQL</type>
      <sql>drop table if exists acq_base;
drop table if exists channelKPI3;
drop table if exists analytics;
drop table if exists order_profit;
drop table if exists order_analytics_idx;
drop table if exists order_channel;
drop table if exists total_order_channel;
drop table if exists ltv_idx;
drop table if exists acq_ret_order;
drop table if exists mktgspend;
drop table if exists channelAnalyticsKPI;
drop table if exists mktg_cost;
drop table if exists channelAnalyticsKPI_acq;
drop table if exists acquisition;
DROP TABLE IF EXISTS Acquisition_mean_dev;
drop table if exists SCALE_TEMP1;
drop table if exists SCALE_TEMP2;
drop table if exists SCALE_TEMP3;
drop table if exists SCALE_TEMP4;
drop table if exists SCALE_TEMP5;
</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>hadoop</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>208</xloc>
      <yloc>96</yloc>
    </entry>
    <entry>
      <name>OrderAnalytics</name>
      <description/>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}/CreateOrderAnalytics.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration>Pentaho local</run_configuration>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
        <parameter>
          <name>HOST</name>
          <stream_name/>
          <value>${HOST}</value>
        </parameter>
        <parameter>
          <name>account</name>
          <stream_name/>
          <value>${account}</value>
        </parameter>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>480</xloc>
      <yloc>96</yloc>
    </entry>
    <entry>
      <name>OrderAnalyticsCreate</name>
      <description/>
      <type>SQL</type>
      <sql>create table order_analytics_idx as select a.* ,b.campaign_id,b.adgroup_id,b.campaign_name,b.adgroup_name,b.keyword,b.source,b.medium from order_profit a left join analytics b on a.order_id=b.transaction_id;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>hadoop</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>592</xloc>
      <yloc>96</yloc>
    </entry>
    <entry>
      <name>Cost</name>
      <description/>
      <type>SQL</type>
      <sql>create table mktgspend as 
select channel,calendar_date,campaign_id,campaign_name,adgroup_id,adgroup_name, sum(kw_clicks)*sum(kw_cpc/1000000) cost from acquisition_base
group by channel,calendar_date,campaign_id,campaign_name,adgroup_id,adgroup_name;

create table acq_ret_order as 
select channel, trans_date,count( distinct case when rank=1 then a.order_id else null end) acq_order ,count( distinct case when rank &lt;&gt; 1 then a.order_id else null end) ret_order,campaign_id,campaign_name,adgroup_id,adgroup_name from
(SELECT order_id,trans_date,rank,campaign_id,campaign_name,adgroup_id,adgroup_name FROM order_analytics_idx
where campaign_name  is NOT NULL and campaign_name &lt;&gt; '(not set)'
GROUP BY order_id,trans_date,rank,campaign_id,campaign_name,adgroup_id,adgroup_name) a 
join total_order_channel b on a.order_id=b.order_id
group by channel, trans_date,campaign_id,campaign_name,adgroup_id,adgroup_name;

create table mktg_cost as 
select a.channel,a.trans_date ,sum(a.cost+coalesce(c.cost,0))as cost,sum((acqcpo+coalesce(cost_adjust,0))*acq_order) as acqmktgspend,sum((retcpo+coalesce(cost_adjust_ret,0))*ret_order) as retmktgspend ,avg(acqcpo+coalesce(cost_adjust,0)) as acqcpo,avg(retcpo+coalesce(cost_adjust_ret,0)) retcpo from
(select channel,trans_date ,sum(cost) as cost,sum(acq_order) acq_order,sum(ret_order) as ret_order,coalesce(avg(acq_cost/acq_order),0) acqCpo,coalesce(avg(ret_cost/ret_order),0) retCpo from
(select a.channel,trans_date, a.campaign_id,a.campaign_name,sum(cost) as cost,sum(acq_order) acq_order,sum(ret_order) ret_order ,sum((cost/(acq_order+ret_order))*acq_order)  acq_cost,sum((cost/(acq_order+ret_order))*ret_order) ret_cost from acq_ret_order a  
join mktgspend b on lower(a.campaign_name)=lower(b.campaign_name) and a.trans_date=b.calendar_date and lower(a.adgroup_name)=lower(b.adgroup_name) and a.channel=b.channel
group by a.channel,trans_date, a.campaign_id,a.campaign_name) a  
group by channel,trans_date) a

left join (select a.channel,a.calendar_date,sum(a.cost) as cost,coalesce(avg(cost*acq_perc),0) as cost_adjust,coalesce(avg(cost*ret_perc),0) as cost_adjust_ret from
(select a.channel,calendar_date, sum(cost) cost from mktgspend a
join acq_ret_order b on lower(a.campaign_name)=lower(b.campaign_name) and a.calendar_date=b.trans_date 
where b.campaign_name is null
group by a.channel,calendar_date) a
join(select channel,trans_date, sum(acq_order) acq_order, sum(ret_order) ret_order,(sum(acq_order)/(sum(acq_order)+sum(ret_order))) as acq_perc,(sum(ret_order)/(sum(acq_order)+sum(ret_order))) as ret_perc from acq_ret_order
group by channel,trans_date) b on a.channel=b.channel and a.calendar_date=b.trans_date
group by a.channel,a.calendar_date) c on a.channel=c.channel and a.trans_date=c.calendar_date
group by a.channel,a.trans_date;


--create  temporary table adgroup_cost as
--select ct.campaign_id,ct.adgroup_id, channel,calendar_date,sum(acq_order) as acq_order,sum(ret_order) as ret_order,sum((cost/(acq_order+ret_order))*acq_order) acq_cost,sum((cost/(acq_order+ret_order))*ret_order) ret_cost,sum(cost) as cost
--from(select campaign_id,adgroup_id,campaign_name,from_unixtime(unix_timestamp(trans_date,'yyyy-MM-dd'),'yyyy-MM-dd') trans_date,sum(if(rank=1,1,0)) acq_order,sum(if(rank &lt;&gt; 1,1,0)) ret_order from order_analytics where transaction_id is not null and campaign_id &lt;&gt; '(not set)'
--group by campaign_id,adgroup_id,campaign_name,trans_date) oc
--join (select channel,calendar_date,campaign_id,adgroup_id,sum(kw_clicks)*sum(kw_cpc/1000000) as cost from acq_base
--group by channel,calendar_date,campaign_id,adgroup_id) ct on oc.campaign_id=ct.campaign_id and oc.adgroup_id=ct.adgroup_id and oc.trans_date=ct.calendar_date
--group by ct.campaign_id,ct.adgroup_id, ct.channel,ct.calendar_date;

--create table acq_cost as 
--select a.channel,a.trans_date ,sum((acqcpo+cost_adjust)*acq_order) ,avg(acqcpo+cost_adjust) as cpo from
--(select channel,trans_date ,sum(acq_order) acq_order,coalesce(avg(acq_cost/acq_order),0) acqCpo,coalesce(avg(ret_cost/ret_order),0) retCpo from
--(select a.channel,trans_date, a.campaign_id,a.campaign_name,sum(acq_order) acq_order,sum(ret_order) ret_order ,sum((cost/(acq_order+ret_order))*acq_order)  acq_cost,sum((cost/(acq_order+ret_order))*ret_order) ret_cost from acq_ret_order a  
--join mktgspend b on lower(a.campaign_name)=lower(b.campaign_name) and a.trans_date=b.calendar_date and lower(a.adgroup_name)=lower(b.adgroup_name) and a.channel=b.channel
--group by a.channel,trans_date, a.campaign_id,a.campaign_name) a  
--group by channel,trans_date) a

--left join (select a.channel,a.calendar_date,avg(cost/acq_order+ret_order) as cost_adjust from
--(select a.channel,calendar_date, sum(cost) cost from mktgspend a
--left join acq_ret_order b on lower(a.campaign_name)=lower(b.campaign_name) and a.calendar_date=b.trans_date 
--where b.campaign_name is null
--group by a.channel,calendar_date) a
--join(select channel,trans_date, sum(acq_order) acq_order, sum(ret_order) ret_order from acq_ret_order
--group by channel,trans_date) b on a.channel=b.channel and a.calendar_date=b.trans_date
--group by a.channel,a.calendar_date) c on a.channel=c.channel and a.trans_date=c.calendar_date
--group by a.channel,a.trans_date</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>hadoop</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>880</xloc>
      <yloc>96</yloc>
    </entry>
    <entry>
      <name>OrderChannel</name>
      <description/>
      <type>SQL</type>
      <sql>create table order_channel as
select order_id, channel from order_analytics_idx a  
join campaigntype${account} b on a.campaign_id=b.campaign_id
union
select a.order_id, b.channel from 
(select order_id ,campaign_id,campaign_name from order_analytics_idx where campaign_id='(not set)' and campaign_name &lt;&gt; '(not set)') a
join campaigntype${account} b on lower(a.campaign_name)=lower(b.campaign_name);

create table total_order_channel as 
select  a.order_id,coalesce(coalesce(channel,case when medium='cpc' then concat(source,'-','medium') else medium end),'offline') as channel from order_analytics_idx a  
left join order_channel b on a.order_id=b.order_id;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>hadoop</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>688</xloc>
      <yloc>96</yloc>
    </entry>
    <entry>
      <name>channelAnalytics</name>
      <description/>
      <type>SQL</type>
      <sql>create table channelAnalyticsKPI_acq as
SELECT trans_date,channel,count(DISTINCT case when rank=1 then a.order_id else null end) as NumOrder, count(DISTINCT case when rank=1 then  customer_id else null end) TotalUniqueCustomer,sum(if(rank=1,profit,0)) profit,
sum(if(rank=1,revenue,0)) revenue FROM (select order_id, trans_date,customer_id,rank,profit,revenue from order_analytics_idx GROUP BY order_id, trans_date,customer_id,rank,profit,revenue) a  
JOIN total_order_channel b on a.order_id=b.order_id
GROUP BY trans_date,channel;


create table ltv_idx as
select cc.channel,cc.start_date,avg(ltv.ltv) ltv from retention_input${account} ltv 
join (select oa.order_id,oa.trans_date,toc.channel,rt.customer_id,rt.start_date  from total_order_channel toc 
join order_analytics_idx oa on toc.order_id=oa.order_id
 join retention_input${account} rt on oa.customer_id=rt.customer_id and month(oa.trans_date)=month(rt.start_date) and year(oa.trans_date)=year(rt.start_date)
where oa.customer_id &lt;&gt; '' and rank=1
order by rt.customer_id,rt.start_date) cc on ltv.customer_id=cc.customer_id and ltv.start_date=cc.start_date
group by cc.channel,cc.start_date;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>hadoop</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>784</xloc>
      <yloc>96</yloc>
    </entry>
    <entry>
      <name>ChannelMap</name>
      <description/>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}/hChannelMap.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration>Pentaho local</run_configuration>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
        <parameter>
          <name>account</name>
          <stream_name/>
          <value/>
        </parameter>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>880</xloc>
      <yloc>192</yloc>
    </entry>
    <entry>
      <name>Acq_mean_dev</name>
      <description/>
      <type>SQL</type>
      <sql>create table acquisition as
select coalesce(a.channel,b.channel) as channel,cast(coalesce(a.trans_date,b.calendar_date) as date) as calendar_date,year(coalesce(a.trans_date,b.calendar_date)) year,month(coalesce(a.trans_date,b.calendar_date)) monthofyear,
(INT((MONTH(coalesce(a.trans_date,b.calendar_date))-1)/3)+1) quarter,weekofyear(coalesce(a.trans_date,b.calendar_date)) weekofyear,
coalesce(a.numorder,0) NUMORDERS,coalesce(a.totaluniquecustomer,0) TOTALNEWCUSTOMERS,coalesce(a.profit,0) PROFIT ,coalesce(a.revenue,0) TOTALREVENUE ,coalesce(b.num_imps,0) NUM_IMPS,coalesce(b.num_clicks,0) NUM_CLICKS, d.ltv ltv,
coalesce(b.ctr,0) CTR,coalesce(b.conv_rate,0) conv_rate,coalesce(b.avg_cpc,0) avg_cpc,coalesce(position,0) as position, coalesce(avg_quality_score,0) as avg_quality_score, coalesce(b.conv,0) conv,coalesce(c.acqmktgspend,0) totalcost, coalesce(c.acqcpo,0) CPO, round(coalesce(revenue/if(coalesce(c.acqmktgspend,0)=0,1,c.acqmktgspend),0),2)*100 ROAS from channelanalyticskpi_acq a  
full join channelkpi3 b on a.channel=b.channel and a.trans_date=b.calendar_date
left join mktg_cost c on a.channel=c.channel and a.trans_date=c.trans_date
left join ltv_idx d on a.channel=d.channel and month(cast(coalesce(a.trans_date,b.calendar_date) as date))=month(d.start_date) and year(cast(coalesce(a.trans_date,b.calendar_date) as date))=year(d.start_date) ;


CREATE  TABLE SCALE_TEMP1 AS 
SELECT channel,
SUM(TOTALCOST) AS TOTALCOST,
SUM(TOTALREVENUE) AS TOTALREVENUE,
SUM(NUMORDERS) AS NUMORDERS,
SUM(TOTALNEWCUSTOMERS) AS TOTALNEWCUSTOMERS,
SUM(PROFIT) AS PROFIT,
SUM(NUM_IMPS) AS NUM_IMPS,
SUM(NUM_CLICKS) AS NUM_CLICKS,
avg(ctr) as CTR,
avg(conv_rate) AS CONV_RATE,
SUM(CONV) AS CONV,
avg(avg_cpc) AS AVG_CPC,
sum(ROAS) as ROAS,
avg(cpo) as CPO,
sum(ltv) as LTV,
AVG(position) AS POSITION,
AVG(avg_quality_score) AS AVG_QUALITY_SCORE
FROM acquisition GROUP BY channel,YEAR,monthofyear,calendar_date;


CREATE TABLE Acquisition_mean_dev (CHANNEL STRING,WINDOW_SIZE STRING,SUM_TOTALCOST DOUBLE  ,  SUM_OF_SQUARE_TOTALCOST DOUBLE, NUM_TOTALCOST INT, SUM_TOTALREVENUE DOUBLE  ,SUM_OF_SQUARE_TOTALREVENUE DOUBLE, NUM_TOTALREVENUE INT, SUM_NUMORDERS BIGINT  ,SUM_OF_SQUARE_NUMORDERS BIGINT, NUM_NUMORDERS INT, SUM_TOTALNEWCUSTOMERS BIGINT  ,SUM_OF_SQUARE_TOTALNEWCUSTOMERS BIGINT , NUM_TOTALNEWCUSTOMERS INT, SUM_PROFIT DOUBLE  ,SUM_OF_SQUARE_PROFIT DOUBLE , NUM_PROFIT  INT,  SUM_NUM_IMPS DOUBLE  ,SUM_OF_SQUARE_NUM_IMPS DOUBLE ,  NUM_NUM_IMPS  INT,SUM_NUM_CLICKS DOUBLE  , SUM_OF_SQUARE_NUM_CLICKS DOUBLE, NUM_NUM_CLICKS INT, SUM_CTR DOUBLE,SUM_OF_SQUARE_CTR DOUBLE, NUM_CTR INT, SUM_CONV_RATE DOUBLE, SUM_OF_SQUARE_CONV_RATE DOUBLE, NUM_CONV_RATE INT, SUM_CONV DOUBLE  ,SUM_OF_SQUARE_CONV DOUBLE , NUM_CONV INT,  SUM_AVG_CPC DOUBLE  ,SUM_OF_SQUARE_AVG_CPC DOUBLE , NUM_AVG_CPC INT,SUM_ROAS DOUBLE,SUM_OF_SQUARE_ROAS DOUBLE,NUM_ROAS INT,SUM_CPO double,SUM_OF_SQUARE_CPO DOUBLE, NUM_CPO INT,SUM_LTV double,SUM_OF_SQUARE_LTV DOUBLE,NUM_LTV INT
,SUM_POSITION DOUBLE, SUM_OF_SQUARE_POSITION DOUBLE, NUM_POSITION INT
,SUM_AVG_QUALITY_SCORE DOUBLE, SUM_OF_SQUARE_AVG_QUALITY_SCORE DOUBLE, NUM_AVG_QUALITY_SCORE INT

);

INSERT INTO Acquisition_mean_dev  SELECT CHANNEL,"DAILY",SUM(TOTALCOST) AS SUM_TOTALCOST,SUM(TOTALCOST*TOTALCOST) AS SUM_OF_SQUARE_TOTALCOST, COUNT(TOTALCOST) AS NUM_TOTALCOST, SUM(TOTALREVENUE) AS SUM_TOTALREVENUE, SUM(TOTALREVENUE*TOTALREVENUE) AS SUM_OF_SQUARE_TOTALREVENUE, COUNT(TOTALREVENUE) AS NUM_TOTALREVENUE, SUM(NUMORDERS) AS SUM_NUMORDERS,SUM(NUMORDERS*NUMORDERS) AS SUM_OF_SQUARE_NUMORDERS, COUNT(NUMORDERS) AS NUM_NUMORDERS, SUM(TOTALNEWCUSTOMERS) AS SUM_TOTALNEWCUSTOMERS,SUM(TOTALNEWCUSTOMERS*TOTALNEWCUSTOMERS) AS SUM_OF_SQUARE_TOTALNEWCUSTOMERS, COUNT(TOTALNEWCUSTOMERS) AS NUM_TOTALNEWCUSTOMERS, SUM(PROFIT) AS SUM_PROFIT,SUM(PROFIT*PROFIT) AS SUM_OF_SQUARE_PROFIT, COUNT(PROFIT) AS NUM_PROFIT, SUM(NUM_IMPS) AS SUM_NUM_IMPS,SUM(NUM_IMPS*NUM_IMPS) AS SUM_OF_SQUARE_NUM_IMPS, COUNT(NUM_IMPS) AS NUM_NUM_IMPS, SUM(NUM_CLICKS) AS SUM_NUM_CLICKS,SUM(NUM_CLICKS*NUM_CLICKS) AS SUM_OF_SQUARE_NUM_CLICKS, COUNT(NUM_CLICKS) AS NUM_NUM_CLICKS, SUM(CTR) AS SUM_CTR, SUM(CTR*CTR) AS SUM_OF_SQUARE_CTR, COUNT(CTR) AS NUM_CTR, SUM(CONV_RATE) AS SUM_CONV_RATE, SUM(CONV_RATE*CONV_RATE)  AS SUM_OF_SQUARE_CONV_RATE, COUNT(CONV_RATE) AS NUM_CONV_RATE, SUM(CONV) AS SUM_CONV,SUM(CONV*CONV) AS SUM_OF_SQUARE_CONV, COUNT(CONV) AS NUM_CONV, SUM(AVG_CPC) AS SUM_AVG_CPC,SUM(AVG_CPC*AVG_CPC) AS SUM_OF_SQUARE_AVG_CPC, COUNT(AVG_CPC) AS NUM_AVG_CPC,SUM(ROAS) AS SUM_ROAS,SUM(ROAS*ROAS) AS SUM_OF_SQUARE_ROAS, COUNT(ROAS) AS NUM_ROAS,SUM(CPO) AS SUM_CPO,SUM(CPO*CPO) AS SUM_OF_SQUARE_CPO, COUNT(CPO) AS NUM_CPO,SUM(LTV) as SUM_LTV,SUM(LTV*LTV) as SUM_OF_SQUARE_LTV, COUNT(LTV) AS NUM_LTV,SUM(position) as SUM_POSITION,SUM(position*position) as SUM_OF_SQUARE_POSITION,COUNT(position) as NUM_POSITION,SUM(avg_quality_score) as SUM_AVG_QUALITY_SCORE,SUM(avg_quality_score*avg_quality_score) as SUM_OF_SQUARE_AVG_QUALITY_SCORE,count(avg_quality_score) as NUM_AVG_QUALITY_SCORE   FROM SCALE_TEMP1 GROUP BY CHANNEL;

CREATE  TABLE SCALE_TEMP2 AS 
SELECT CHANNEL,
SUM(TOTALCOST) AS TOTALCOST,
SUM(TOTALREVENUE) AS TOTALREVENUE,
SUM(NUMORDERS) AS NUMORDERS,
SUM(TOTALNEWCUSTOMERS) AS TOTALNEWCUSTOMERS,
SUM(PROFIT) AS PROFIT,
SUM(NUM_IMPS) AS NUM_IMPS,
SUM(NUM_CLICKS) AS NUM_CLICKS,
avg(ctr) AS CTR,
avg(conv_rate) AS CONV_RATE,
SUM(CONV) AS CONV,
avg(avg_cpc) AS AVG_CPC,
SUM(ROAS) AS ROAS,
avg(CPO) as CPO,
sum(ltv) as LTV,
AVG(position) AS POSITION,
AVG(avg_quality_score) AS avg_quality_score
FROM acquisition GROUP BY CHANNEL,YEAR,monthofyear;

INSERT INTO Acquisition_mean_dev  SELECT CHANNEL,"MONTHLY",SUM(TOTALCOST) AS SUM_TOTALCOST,SUM(TOTALCOST*TOTALCOST) AS SUM_OF_SQUARE_TOTALCOST, COUNT(TOTALCOST) AS NUM_TOTALCOST, SUM(TOTALREVENUE) AS SUM_TOTALREVENUE, SUM(TOTALREVENUE*TOTALREVENUE) AS SUM_OF_SQUARE_TOTALREVENUE, COUNT(TOTALREVENUE) AS NUM_TOTALREVENUE, SUM(NUMORDERS) AS SUM_NUMORDERS,SUM(NUMORDERS*NUMORDERS) AS SUM_OF_SQUARE_NUMORDERS, COUNT(NUMORDERS) AS NUM_NUMORDERS, SUM(TOTALNEWCUSTOMERS) AS SUM_TOTALNEWCUSTOMERS,SUM(TOTALNEWCUSTOMERS*TOTALNEWCUSTOMERS) AS SUM_OF_SQUARE_TOTALNEWCUSTOMERS, COUNT(TOTALNEWCUSTOMERS) AS NUM_TOTALNEWCUSTOMERS, SUM(PROFIT) AS SUM_PROFIT,SUM(PROFIT*PROFIT) AS SUM_OF_SQUARE_PROFIT, COUNT(PROFIT) AS NUM_PROFIT, SUM(NUM_IMPS) AS SUM_NUM_IMPS,SUM(NUM_IMPS*NUM_IMPS) AS SUM_OF_SQUARE_NUM_IMPS, COUNT(NUM_IMPS) AS NUM_NUM_IMPS, SUM(NUM_CLICKS) AS SUM_NUM_CLICKS,SUM(NUM_CLICKS*NUM_CLICKS) AS SUM_OF_SQUARE_NUM_CLICKS, COUNT(NUM_CLICKS) AS NUM_NUM_CLICKS, SUM(CTR) AS SUM_CTR, SUM(CTR*CTR) AS SUM_OF_SQUARE_CTR, COUNT(CTR) AS NUM_CTR, SUM(CONV_RATE) AS SUM_CONV_RATE, SUM(CONV_RATE*CONV_RATE)  AS SUM_OF_SQUARE_CONV_RATE, COUNT(CONV_RATE) AS NUM_CONV_RATE, SUM(CONV) AS SUM_CONV,SUM(CONV*CONV) AS SUM_OF_SQUARE_CONV, COUNT(CONV) AS NUM_CONV, SUM(AVG_CPC) AS SUM_AVG_CPC,SUM(AVG_CPC*AVG_CPC) AS SUM_OF_SQUARE_AVG_CPC, COUNT(AVG_CPC) AS NUM_AVG_CPC,SUM(ROAS) AS SUM_ROAS,SUM(ROAS*ROAS) AS SUM_OF_SQUARE_ROAS, COUNT(ROAS) AS NUM_ROAS,SUM(CPO) AS SUM_CPO,SUM(CPO*CPO) AS SUM_OF_SQUARE_CPO, COUNT(CPO) AS NUM_CPO,SUM(LTV) as SUM_LTV,SUM(LTV*LTV) as SUM_OF_SQUARE_LTV,COUNT(LTV) as NUM_LTV,SUM(position) as SUM_POSITION,SUM(position*position) as SUM_OF_SQUARE_POSITION,COUNT(position) as NUM_POSITION,SUM(avg_quality_score) as SUM_AVG_QUALITY_SCORE,SUM(avg_quality_score*avg_quality_score) as SUM_OF_SQUARE_AVG_QUALITY_SCORE,count(avg_quality_score) as NUM_AVG_QUALITY_SCORE FROM SCALE_TEMP2 GROUP BY CHANNEL;

CREATE TEMPORARY TABLE SCALE_TEMP3 AS 
SELECT CHANNEL,
SUM(TOTALCOST) AS TOTALCOST,
SUM(TOTALREVENUE) AS TOTALREVENUE,
SUM(NUMORDERS) AS NUMORDERS,
SUM(TOTALNEWCUSTOMERS) AS TOTALNEWCUSTOMERS,
SUM(PROFIT) AS PROFIT,
SUM(NUM_IMPS) AS NUM_IMPS,
SUM(NUM_CLICKS) AS NUM_CLICKS,
SUM(NUM_CLICKS)/SUM(NUM_IMPS)*100 AS CTR,
SUM(CONV)/SUM(NUM_CLICKS)*100 AS CONV_RATE,
SUM(CONV) AS CONV,
SUM(NUM_CLICKS*AVG_CPC)/SUM(NUM_CLICKS) AS AVG_CPC,
SUM(ROAS) AS ROAS,
AVG(CPO) AS CPO,
SUM(ltv) AS LTV,
AVG(position) AS POSITION,
AVG(avg_quality_score) AS AVG_QUALITY_SCORE
FROM Acquisition GROUP BY CHANNEL,YEAR,WEEKOFYEAR;

CREATE  TABLE SCALE_TEMP4 AS 
SELECT CHANNEL,
SUM(TOTALCOST) AS TOTALCOST,
SUM(TOTALREVENUE) AS TOTALREVENUE,
SUM(NUMORDERS) AS NUMORDERS,
SUM(TOTALNEWCUSTOMERS) AS TOTALNEWCUSTOMERS,
SUM(PROFIT) AS PROFIT,
SUM(NUM_IMPS) AS NUM_IMPS,
SUM(NUM_CLICKS) AS NUM_CLICKS,
SUM(NUM_CLICKS)/SUM(NUM_IMPS)*100 AS CTR,
SUM(CONV)/SUM(NUM_CLICKS)*100 AS CONV_RATE,
SUM(CONV) AS CONV,
SUM(NUM_CLICKS*AVG_CPC)/SUM(NUM_CLICKS) AS AVG_CPC,
SUM(ROAS) AS ROAS,
AVG(CPO)  AS CPO,
SUM(ltv) AS LTV
AVG(position) AS POSITION,
AVG(avg_quality_score) AS AVG_QUALITY_SCORE
FROM Acquisition GROUP BY CHANNEL,YEAR,QUARTER;

CREATE TABLE SCALE_TEMP5 AS 
SELECT CHANNEL,
SUM(TOTALCOST) AS TOTALCOST,
SUM(TOTALREVENUE) AS TOTALREVENUE,
SUM(NUMORDERS) AS NUMORDERS,
SUM(TOTALNEWCUSTOMERS) AS TOTALNEWCUSTOMERS,
SUM(PROFIT) AS PROFIT,
SUM(NUM_IMPS) AS NUM_IMPS,
SUM(NUM_CLICKS) AS NUM_CLICKS,
SUM(NUM_CLICKS)/SUM(NUM_IMPS)*100 AS CTR,
SUM(CONV)/SUM(NUM_CLICKS)*100 AS CONV_RATE,
SUM(CONV) AS CONV,
SUM(NUM_CLICKS*AVG_CPC)/SUM(NUM_CLICKS) AS AVG_CPC,
SUM(ROAS) AS ROAS,
AVG(CPO) AS CPO,
SUM(ltv) AS LTV,
AVG(position) AS POSITION,
AVG(avg_quality_score) AS AVG_QUALITY_SCORE
FROM Acquisition GROUP BY CHANNEL,YEAR;

INSERT INTO Acquisition_mean_dev  SELECT CHANNEL,"WEEKLY",SUM(TOTALCOST) AS SUM_TOTALCOST,SUM(TOTALCOST*TOTALCOST) AS SUM_OF_SQUARE_TOTALCOST, COUNT(TOTALCOST) AS NUM_TOTALCOST, SUM(TOTALREVENUE) AS SUM_TOTALREVENUE, SUM(TOTALREVENUE*TOTALREVENUE) AS SUM_OF_SQUARE_TOTALREVENUE, COUNT(TOTALREVENUE) AS NUM_TOTALREVENUE, SUM(NUMORDERS) AS SUM_NUMORDERS,SUM(NUMORDERS*NUMORDERS) AS SUM_OF_SQUARE_NUMORDERS, COUNT(NUMORDERS) AS NUM_NUMORDERS, SUM(TOTALNEWCUSTOMERS) AS SUM_TOTALNEWCUSTOMERS,SUM(TOTALNEWCUSTOMERS*TOTALNEWCUSTOMERS) AS SUM_OF_SQUARE_TOTALNEWCUSTOMERS, COUNT(TOTALNEWCUSTOMERS) AS NUM_TOTALNEWCUSTOMERS, SUM(PROFIT) AS SUM_PROFIT,SUM(PROFIT*PROFIT) AS SUM_OF_SQUARE_PROFIT, COUNT(PROFIT) AS NUM_PROFIT, SUM(NUM_IMPS) AS SUM_NUM_IMPS,SUM(NUM_IMPS*NUM_IMPS) AS SUM_OF_SQUARE_NUM_IMPS, COUNT(NUM_IMPS) AS NUM_NUM_IMPS, SUM(NUM_CLICKS) AS SUM_NUM_CLICKS,SUM(NUM_CLICKS*NUM_CLICKS) AS SUM_OF_SQUARE_NUM_CLICKS, COUNT(NUM_CLICKS) AS NUM_NUM_CLICKS, SUM(CTR) AS SUM_CTR, SUM(CTR*CTR) AS SUM_OF_SQUARE_CTR, COUNT(CTR) AS NUM_CTR, SUM(CONV_RATE) AS SUM_CONV_RATE, SUM(CONV_RATE*CONV_RATE)  AS SUM_OF_SQUARE_CONV_RATE, COUNT(CONV_RATE) AS NUM_CONV_RATE, SUM(CONV) AS SUM_CONV,SUM(CONV*CONV) AS SUM_OF_SQUARE_CONV, COUNT(CONV) AS NUM_CONV, SUM(AVG_CPC) AS SUM_AVG_CPC,SUM(AVG_CPC*AVG_CPC) AS SUM_OF_SQUARE_AVG_CPC, COUNT(AVG_CPC) AS NUM_AVG_CPC,SUM(ROAS) AS SUM_ROAS,SUM(ROAS*ROAS) AS SUM_OF_SQUARE_ROAS, COUNT(ROAS) AS NUM_ROAS,SUM(CPO) AS SUM_CPO,SUM(CPO*CPO) AS SUM_OF_SQUARE_CPO, COUNT(CPO) AS NUM_CPO,SUM(LTV) as SUM_LTV,SUM(LTV*LTV)as SUM_OF_SQUARE_LTV,COUNT(LTV) as NUM_LTV,
,SUM(POSITION) AS SUM_POSITION, SUM(POSITION) AS SUM_OF_SQUARE_POSITION, COUNT(POSITION) AS NUM_POSITION ,SUM(AVG_QUALITY_SCORE) AS SUM_AVG_QUALITY_SCORE,SUM(AVG_QUALITY_SCORE*AVG_QUALITY_SCORE) AS SUM_OF_SQUARE_AVG_QUALITY_SCORE , COUNT(AVG_QUALITY_SCORE) AS NUM_AVG_QUALITY_SCORE
FROM SCALE_TEMP3 GROUP BY CHANNEL;

INSERT INTO Acquisition_mean_dev  SELECT CHANNEL,"QUARTERLY",SUM(TOTALCOST) AS SUM_TOTALCOST,SUM(TOTALCOST*TOTALCOST) AS SUM_OF_SQUARE_TOTALCOST, COUNT(TOTALCOST) AS NUM_TOTALCOST, SUM(TOTALREVENUE) AS SUM_TOTALREVENUE, SUM(TOTALREVENUE*TOTALREVENUE) AS SUM_OF_SQUARE_TOTALREVENUE, COUNT(TOTALREVENUE) AS NUM_TOTALREVENUE, SUM(NUMORDERS) AS SUM_NUMORDERS,SUM(NUMORDERS*NUMORDERS) AS SUM_OF_SQUARE_NUMORDERS, COUNT(NUMORDERS) AS NUM_NUMORDERS, SUM(TOTALNEWCUSTOMERS) AS SUM_TOTALNEWCUSTOMERS,SUM(TOTALNEWCUSTOMERS*TOTALNEWCUSTOMERS) AS SUM_OF_SQUARE_TOTALNEWCUSTOMERS, COUNT(TOTALNEWCUSTOMERS) AS NUM_TOTALNEWCUSTOMERS, SUM(PROFIT) AS SUM_PROFIT,SUM(PROFIT*PROFIT) AS SUM_OF_SQUARE_PROFIT, COUNT(PROFIT) AS NUM_PROFIT, SUM(NUM_IMPS) AS SUM_NUM_IMPS,SUM(NUM_IMPS*NUM_IMPS) AS SUM_OF_SQUARE_NUM_IMPS, COUNT(NUM_IMPS) AS NUM_NUM_IMPS, SUM(NUM_CLICKS) AS SUM_NUM_CLICKS,SUM(NUM_CLICKS*NUM_CLICKS) AS SUM_OF_SQUARE_NUM_CLICKS, COUNT(NUM_CLICKS) AS NUM_NUM_CLICKS, SUM(CTR) AS SUM_CTR, SUM(CTR*CTR) AS SUM_OF_SQUARE_CTR, COUNT(CTR) AS NUM_CTR, SUM(CONV_RATE) AS SUM_CONV_RATE, SUM(CONV_RATE*CONV_RATE)  AS SUM_OF_SQUARE_CONV_RATE, COUNT(CONV_RATE) AS NUM_CONV_RATE, SUM(CONV) AS SUM_CONV,SUM(CONV*CONV) AS SUM_OF_SQUARE_CONV, COUNT(CONV) AS NUM_CONV, SUM(AVG_CPC) AS SUM_AVG_CPC,SUM(AVG_CPC*AVG_CPC) AS SUM_OF_SQUARE_AVG_CPC, COUNT(AVG_CPC) AS NUM_AVG_CPC,SUM(ROAS) AS SUM_ROAS,SUM(ROAS*ROAS) AS SUM_OF_SQUARE_ROAS, COUNT(ROAS) AS NUM_ROAS,SUM(CPO) AS SUM_CPO,SUM(CPO*CPO) AS SUM_OF_SQUARE_CPO, COUNT(CPO) AS NUM_CPO,SUM(LTV) as SUM_LTV,SUM(LTV*LTV) as SUM_OF_SQUARE_LTV,COUNT(LTV) as NUM_LTV
,SUM(POSITION) AS SUM_POSITION, SUM(POSITION) AS SUM_OF_SQUARE_POSITION, COUNT(POSITION) AS NUM_POSITION,SUM(AVG_QUALITY_SCORE) AS SUM_AVG_QUALITY_SCORE,SUM(AVG_QUALITY_SCORE*AVG_QUALITY_SCORE) AS SUM_OF_SQUARE_AVG_QUALITY_SCORE , COUNT(AVG_QUALITY_SCORE) AS NUM_AVG_QUALITY_SCORE 
FROM SCALE_TEMP4 GROUP BY CHANNEL;

INSERT INTO Acquisition_mean_dev  SELECT CHANNEL,"YEARLY",SUM(TOTALCOST) AS SUM_TOTALCOST,SUM(TOTALCOST*TOTALCOST) AS SUM_OF_SQUARE_TOTALCOST, COUNT(TOTALCOST) AS NUM_TOTALCOST, SUM(TOTALREVENUE) AS SUM_TOTALREVENUE, SUM(TOTALREVENUE*TOTALREVENUE) AS SUM_OF_SQUARE_TOTALREVENUE, COUNT(TOTALREVENUE) AS NUM_TOTALREVENUE, SUM(NUMORDERS) AS SUM_NUMORDERS,SUM(NUMORDERS*NUMORDERS) AS SUM_OF_SQUARE_NUMORDERS, COUNT(NUMORDERS) AS NUM_NUMORDERS, SUM(TOTALNEWCUSTOMERS) AS SUM_TOTALNEWCUSTOMERS,SUM(TOTALNEWCUSTOMERS*TOTALNEWCUSTOMERS) AS SUM_OF_SQUARE_TOTALNEWCUSTOMERS, COUNT(TOTALNEWCUSTOMERS) AS NUM_TOTALNEWCUSTOMERS, SUM(PROFIT) AS SUM_PROFIT,SUM(PROFIT*PROFIT) AS SUM_OF_SQUARE_PROFIT, COUNT(PROFIT) AS NUM_PROFIT, SUM(NUM_IMPS) AS SUM_NUM_IMPS,SUM(NUM_IMPS*NUM_IMPS) AS SUM_OF_SQUARE_NUM_IMPS, COUNT(NUM_IMPS) AS NUM_NUM_IMPS, SUM(NUM_CLICKS) AS SUM_NUM_CLICKS,SUM(NUM_CLICKS*NUM_CLICKS) AS SUM_OF_SQUARE_NUM_CLICKS, COUNT(NUM_CLICKS) AS NUM_NUM_CLICKS, SUM(CTR) AS SUM_CTR, SUM(CTR*CTR) AS SUM_OF_SQUARE_CTR, COUNT(CTR) AS NUM_CTR, SUM(CONV_RATE) AS SUM_CONV_RATE, SUM(CONV_RATE*CONV_RATE)  AS SUM_OF_SQUARE_CONV_RATE, COUNT(CONV_RATE) AS NUM_CONV_RATE, SUM(CONV) AS SUM_CONV,SUM(CONV*CONV) AS SUM_OF_SQUARE_CONV, COUNT(CONV) AS NUM_CONV, SUM(AVG_CPC) AS SUM_AVG_CPC,SUM(AVG_CPC*AVG_CPC) AS SUM_OF_SQUARE_AVG_CPC, COUNT(AVG_CPC) AS NUM_AVG_CPC,SUM(ROAS) AS SUM_ROAS,SUM(ROAS*ROAS) AS SUM_OF_SQUARE_ROAS, COUNT(ROAS) AS NUM_ROAS,SUM(CPO) AS SUM_CPO,SUM(CPO*CPO) AS SUM_OF_SQUARE_CPO, COUNT(CPO) AS NUM_CPO,SUM(LTV) as SUM_LTV,SUM(LTV*LTV) as SUM_OF_SQUARE_LTV,COUNT(LTV) as  NUM_LTV
,SUM(POSITION) AS SUM_POSITION, SUM(POSITION) AS SUM_OF_SQUARE_POSITION, COUNT(POSITION) AS NUM_POSITION ,SUM(AVG_QUALITY_SCORE) AS SUM_AVG_QUALITY_SCORE,SUM(AVG_QUALITY_SCORE*AVG_QUALITY_SCORE) AS SUM_OF_SQUARE_AVG_QUALITY_SCORE , COUNT(AVG_QUALITY_SCORE) AS NUM_AVG_QUALITY_SCORE
FROM SCALE_TEMP5 GROUP BY CHANNEL;
</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>hadoop</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>784</xloc>
      <yloc>192</yloc>
    </entry>
    <entry>
      <name>PushDataMongo</name>
      <description/>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}/Push_AcqIndexToMongo.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration>Pentaho local</run_configuration>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
        <parameter>
          <name>HOST</name>
          <stream_name/>
          <value/>
        </parameter>
        <parameter>
          <name>account</name>
          <stream_name/>
          <value/>
        </parameter>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>672</xloc>
      <yloc>192</yloc>
    </entry>
    <entry>
      <name>Success</name>
      <description/>
      <type>SUCCESS</type>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>560</xloc>
      <yloc>192</yloc>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>BaseTable</from>
      <to>channelKPI</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Drop</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Drop</from>
      <to>BaseTable</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>channelKPI</from>
      <to>OrderAnalytics</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>OrderAnalytics</from>
      <to>OrderAnalyticsCreate</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>OrderAnalyticsCreate</from>
      <to>OrderChannel</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>OrderChannel</from>
      <to>channelAnalytics</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>channelAnalytics</from>
      <to>Cost</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Cost</from>
      <to>ChannelMap</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>ChannelMap</from>
      <to>Acq_mean_dev</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Acq_mean_dev</from>
      <to>PushDataMongo</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>PushDataMongo</from>
      <to>Success</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes>
    <group>
      <name>METASTORE.NamedClusters</name>
      <attribute>
        <key>NamedCluster</key>
        <value>{"namespace":"NamedClusters","id":"NamedCluster","name":"NamedCluster","description":"A NamedCluster","metaStoreName":null}</value>
      </attribute>
    </group>
    <group>
      <name>METASTORE.pentaho</name>
      <attribute>
        <key>Default Run Configuration</key>
        <value>{"namespace":"pentaho","id":"Default Run Configuration","name":"Default Run Configuration","description":"Defines a default run configuration","metaStoreName":null}</value>
      </attribute>
    </group>
    <group>
      <name>{"_":"Embedded MetaStore Elements","namespace":"NamedClusters","type":"NamedCluster"}</name>
      <attribute>
        <key>hadoop</key>
        <value>{"children":[{"children":[],"id":"hdfsPassword","value":null},{"children":[],"id":"oozieUrl","value":"http://node-01.algo:8080/oozie"},{"children":[],"id":"mapr","value":"N"},{"children":[],"id":"useGateway","value":"N"},{"children":[],"id":"lastModifiedDate","value":"1500013133689"},{"children":[],"id":"jobTrackerHost","value":"node-01.algo"},{"children":[],"id":"zooKeeperHost","value":"node-01.algo"},{"children":[],"id":"shimIdentifier","value":null},{"children":[],"id":"gatewayUrl","value":null},{"children":[],"id":"jobTrackerPort","value":"8050"},{"children":[],"id":"zooKeeperPort","value":"2181"},{"children":[],"id":"name","value":"hadoop"},{"children":[],"id":"hdfsPort","value":"8020"},{"children":[],"id":"hdfsUsername","value":"TD054"},{"children":[],"id":"gatewayPassword","value":null},{"children":[],"id":"kafkaBootstrapServers","value":null},{"children":[],"id":"storageScheme","value":"hdfs"},{"children":[],"id":"hdfsHost","value":"node-01.algo"},{"children":[],"id":"gatewayUsername","value":null}],"id":"hadoop","value":null,"name":"hadoop","owner":null,"ownerPermissionsList":[]}</value>
      </attribute>
    </group>
    <group>
      <name>{"_":"Embedded MetaStore Elements","namespace":"pentaho","type":"Default Run Configuration"}</name>
      <attribute>
        <key>Pentaho local</key>
        <value>{"children":[{"children":[],"id":"server","value":null},{"children":[],"id":"clustered","value":"N"},{"children":[],"id":"name","value":"Pentaho local"},{"children":[],"id":"description","value":null},{"children":[],"id":"pentaho","value":"N"},{"children":[],"id":"readOnly","value":"Y"},{"children":[],"id":"sendResources","value":"N"},{"children":[],"id":"logRemoteExecutionLocally","value":"N"},{"children":[],"id":"remote","value":"N"},{"children":[],"id":"local","value":"Y"},{"children":[],"id":"showTransformations","value":"N"}],"id":"Pentaho local","value":null,"name":"Pentaho local","owner":null,"ownerPermissionsList":[]}</value>
      </attribute>
    </group>
  </attributes>
</job>
